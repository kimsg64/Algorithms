{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\n\nfunction logInAPI(data) {\n  // 실제로 서버에 요청(제너레이터 아님)\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // take는 해당 액션이 실행될 때까지 기다렸다가 두 번째 인자로 전달된 함수를 실행시킨다. (액션 데이터도 같이 넘어간다.)\n          // 이 take는 일회용이라서 그냥 이렇게 쓰면 로그인을 한 번밖에 못한다...\n          // 그래서 while문을 사용하거나, takeEvery로 바꿔서 사용해 주면 된다.\n          // 단, take는 동기적이지만 takeEvery는 비동기적으로 동작한다는 차이가 있다.\n          // takeLatest는 반복적인 요청에 대해 마지막 응답만을 취하는 것이다.\n          // 예를 들면, 실수로 두 번 클릭했을 때, 로그인 요청이 두 번 가는데, 이 때 마지막 요청에 대한 응답만을 받아오게 해 준다. (요청 자체를 취소할 수는 없음)\n          // 그래서 보통 takeLatest를 쓴다.\n          console.log(\"saga login requrest\");\n          _context2.next = 3;\n          return takeLatest(\"LOG_IN_REQUEST\", logIn);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/sagas/user.js"],"names":["logIn","watchLogIn","logOut","watchLogOut","userSaga","axios","all","delay","fork","put","takeLatest","logInAPI","data","post","action","type","response","console","log","logOutAPI"],"mappings":";;oDAQUA,K;qDA2BAC,U;qDAgBAC,M;qDAgBAC,W;qDAIeC,Q;;AAvEzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AACA,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAZJ;AAAA;AAeI,iBAAME,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE,gBADE;AAERH,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AAfJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAoBI,iBAAMH,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE,gBADE;AAERH,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFX,WAAD,CAAT;;AApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACAgB,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AARF;AASE,iBAAMR,UAAU,CAAC,gBAAD,EAAmBV,KAAnB,CAAhB;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAASmB,SAAT,GAAqB;AACnB,SAAOd,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUX,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAME,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE,iBADE;AAERH,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMH,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE,iBADE;AAERH,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUT,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAAC,iBAAD,EAAoBR,MAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CAACE,IAAI,CAACP,UAAD,CAAL,EAAmBO,IAAI,CAACL,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nfunction logInAPI(data) {\r\n  // 실제로 서버에 요청(제너레이터 아님)\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // call도 해당 함수를 실행시키는데, fork와 약간 다르다.\r\n    // fork는 비동기 함수 호출, call은 동기 함수 호출이다.\r\n    // 즉 여기서 yield call 대신 yield fork를 써버리면, loginAPI의 결과가 result에 담기기 전에 바로 다음 줄로 넘어가 버린다.\r\n    // call을 하면 앞의 logInAPI가 완료될 때까지 실행되지 않는다.\r\n    // 즉 call은 axios.post().then(res => res)처럼 작동하지만, fork를 여기서 쓰면 axios.post() 뒤에 res가 없는데 res를 찾는 꼴이 되어버린다.\r\n    // 또, call과 fork는 첫 번째 인자로 콜백함수, 두 번째 인자부터는 다른 데이터들이 넘어가는데, 이는 callback(a, b, c, ...) 이런 식으로 사용하는 것과 같다.\r\n    // 아래 예시로는 logInAPI(action.data)와 같은 것\r\n    // const result = yield call(logInAPI, action.data);\r\n\r\n    // 서버가 없는 상태이므로 임시로 delay를 사용할 예정이다. setTimeout과 비슷하다.\r\n    yield delay(1000);\r\n\r\n    // put은 dispatch같은 것이다.\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  // take는 해당 액션이 실행될 때까지 기다렸다가 두 번째 인자로 전달된 함수를 실행시킨다. (액션 데이터도 같이 넘어간다.)\r\n  // 이 take는 일회용이라서 그냥 이렇게 쓰면 로그인을 한 번밖에 못한다...\r\n  // 그래서 while문을 사용하거나, takeEvery로 바꿔서 사용해 주면 된다.\r\n  // 단, take는 동기적이지만 takeEvery는 비동기적으로 동작한다는 차이가 있다.\r\n  // takeLatest는 반복적인 요청에 대해 마지막 응답만을 취하는 것이다.\r\n  // 예를 들면, 실수로 두 번 클릭했을 때, 로그인 요청이 두 번 가는데, 이 때 마지막 요청에 대한 응답만을 받아오게 해 준다. (요청 자체를 취소할 수는 없음)\r\n  // 그래서 보통 takeLatest를 쓴다.\r\n  console.log(\"saga login requrest\");\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}