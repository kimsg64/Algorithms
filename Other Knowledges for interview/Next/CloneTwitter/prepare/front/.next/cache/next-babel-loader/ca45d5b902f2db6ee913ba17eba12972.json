{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(follow),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchFollow),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(unfollow),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnfollow),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE } from \"../reducers/user\";\n\nfunction followAPI(data) {\n  // 실제로 서버에 요청(제너레이터 아님)\n  return axios.post(\"/api/follow\", data);\n}\n\nfunction follow(action) {\n  return _regeneratorRuntime.wrap(function follow$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: FOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: FOLLOW_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchFollow() {\n  return _regeneratorRuntime.wrap(function watchFollow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction unfollowAPI(data) {\n  // 실제로 서버에 요청(제너레이터 아님)\n  return axios.post(\"/api/unfollow\", data);\n}\n\nfunction unfollow(action) {\n  return _regeneratorRuntime.wrap(function unfollow$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: UNFOLLOW_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchUnfollow() {\n  return _regeneratorRuntime.wrap(function watchUnfollow$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(UNFOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction logInAPI(data) {\n  // 실제로 서버에 요청(제너레이터 아님)\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context7.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context7.next = 11;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            data: _context7.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction SignUpAPI() {\n  return axios.post(\"/api/signup\");\n}\n\n_c = SignUpAPI;\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context9.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context9.next = 11;\n          break;\n\n        case 7:\n          _context9.prev = 7;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE,\n            data: _context9.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all(fork(watchFollow), fork(watchUnfollow), [fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpAPI\");","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/sagas/user.js"],"names":["follow","watchFollow","unfollow","watchUnfollow","logIn","watchLogIn","logOut","watchLogOut","signUp","watchSignUp","userSaga","axios","all","delay","fork","put","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","followAPI","data","post","action","type","response","unfollowAPI","logInAPI","logOutAPI","SignUpAPI"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n} from \"../reducers/user\";\r\n\r\nfunction followAPI(data) {\r\n  // 실제로 서버에 요청(제너레이터 아님)\r\n  return axios.post(\"/api/follow\", data);\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction unfollowAPI(data) {\r\n  // 실제로 서버에 요청(제너레이터 아님)\r\n  return axios.post(\"/api/unfollow\", data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  // 실제로 서버에 요청(제너레이터 아님)\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // call도 해당 함수를 실행시키는데, fork와 약간 다르다.\r\n    // fork는 비동기 함수 호출, call은 동기 함수 호출이다.\r\n    // 즉 여기서 yield call 대신 yield fork를 써버리면, loginAPI의 결과가 result에 담기기 전에 바로 다음 줄로 넘어가 버린다.\r\n    // call을 하면 앞의 logInAPI가 완료될 때까지 실행되지 않는다.\r\n    // 즉 call은 axios.post().then(res => res)처럼 작동하지만, fork를 여기서 쓰면 axios.post() 뒤에 res가 없는데 res를 찾는 꼴이 되어버린다.\r\n    // 또, call과 fork는 첫 번째 인자로 콜백함수, 두 번째 인자부터는 다른 데이터들이 넘어가는데, 이는 callback(a, b, c, ...) 이런 식으로 사용하는 것과 같다.\r\n    // 아래 예시로는 logInAPI(action.data)와 같은 것\r\n    // const result = yield call(logInAPI, action.data);\r\n\r\n    // 서버가 없는 상태이므로 임시로 delay를 사용할 예정이다. setTimeout과 비슷하다.\r\n    yield delay(1000);\r\n\r\n    // put은 dispatch같은 것이다.\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  // take는 해당 액션이 실행될 때까지 기다렸다가 두 번째 인자로 전달된 함수를 실행시킨다. (액션 데이터도 같이 넘어간다.)\r\n  // 이 take는 일회용이라서 그냥 이렇게 쓰면 로그인을 한 번밖에 못한다...\r\n  // 그래서 while문을 사용하거나, takeEvery로 바꿔서 사용해 주면 된다.\r\n  // 단, take는 동기적이지만 takeEvery는 비동기적으로 동작한다는 차이가 있다.\r\n  // takeLatest는 반복적인 요청에 대해 마지막 응답만을 취하는 것이다.\r\n  // 예를 들면, 실수로 두 번 클릭했을 때, 로그인 요청이 두 번 가는데, 이 때 마지막 요청에 대한 응답만을 받아오게 해 준다. (요청 자체를 취소할 수는 없음)\r\n  // 그래서 보통 takeLatest를 쓴다.\r\n  // console.log(\"saga login requrest\");\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction SignUpAPI() {\r\n  return axios.post(\"/api/signup\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all(fork(watchFollow), fork(watchUnfollow), [\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}