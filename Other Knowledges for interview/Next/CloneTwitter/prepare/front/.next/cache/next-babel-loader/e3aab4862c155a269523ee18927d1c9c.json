{"ast":null,"code":"var _jsxFileName = \"D:\\\\__My_crafts\\\\Algorithms For Coding Test\\\\Other Knowledges for interview\\\\Next\\\\CloneTwitter\\\\prepare\\\\front\\\\components\\\\CommentForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nconst CommentForm = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    addCommentDone\n  } = useSelector(state => state.user);\n  const [commentText, setCommentText, onChangeCommentText] = useInput(\"\");\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    console.log(post.id, commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId,\n        id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    style: {\n      position: \"relative\",\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      position: \"absolute\",\n      right: 0,\n      bottom: -40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"\\uC090\\uC57D\"));\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/components/CommentForm.js"],"names":["React","useCallback","Button","Form","Input","PropTypes","useSelector","useInput","useDispatch","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","commentText","setCommentText","onChangeCommentText","useEffect","onSubmitComment","console","log","type","data","content","postId","userId","position","margin","right","bottom","propTypes","object","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,EAAE,GAAGP,WAAW,CAAEQ,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAqBX,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAtC;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,EAA8BC,mBAA9B,IAAqDb,QAAQ,CAAC,EAAD,CAAnE;AAEAc,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIJ,cAAJ,EAAoB;AAClBE,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACF,cAAD,CAJM,CAAT;AAMA,QAAMK,eAAe,GAAGrB,WAAW,CAAC,MAAM;AACxCsB,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAI,CAACE,EAAjB,EAAqBK,WAArB;AACAN,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAEhB,mBADC;AAEPiB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAET,WAAX;AAAwBU,QAAAA,MAAM,EAAEjB,IAAI,CAACE,EAArC;AAAyCgB,QAAAA,MAAzC;AAAiDhB,QAAAA;AAAjD;AAFC,KAAD,CAAR;AAID,GANkC,EAMhC,CAACK,WAAD,EAAcL,EAAd,CANgC,CAAnC;AAQA,SACE,MAAC,IAAD;AACE,IAAA,QAAQ,EAAES,eADZ;AAEE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE;AAAhC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,KAAK,EAAEb,WADT;AAEE,IAAA,QAAQ,EAAEE,mBAFZ;AAGE,IAAA,IAAI,EAAE,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EASE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,QAAQ,EAAC,QAFX;AAGE,IAAA,KAAK,EAAE;AAAEU,MAAAA,QAAQ,EAAE,UAAZ;AAAwBE,MAAAA,KAAK,EAAE,CAA/B;AAAkCC,MAAAA,MAAM,EAAE,CAAC;AAA3C,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF,CADF;AAmBD,CAvCD;;AAyCAvB,WAAW,CAACwB,SAAZ,GAAwB;AACtBvB,EAAAA,IAAI,EAAEN,SAAS,CAAC8B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAe1B,WAAf","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const { addCommentDone } = useSelector((state) => state.user);\r\n  const [commentText, setCommentText, onChangeCommentText] = useInput(\"\");\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText(\"\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    console.log(post.id, commentText);\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, postId: post.id, userId, id },\r\n    });\r\n  }, [commentText, id]);\r\n\r\n  return (\r\n    <Form\r\n      onFinish={onSubmitComment}\r\n      style={{ position: \"relative\", margin: 0 }}\r\n    >\r\n      <Input.TextArea\r\n        value={commentText}\r\n        onChange={onChangeCommentText}\r\n        rows={4}\r\n      />\r\n      <Button\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        style={{ position: \"absolute\", right: 0, bottom: -40 }}\r\n      >\r\n        삐약\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}