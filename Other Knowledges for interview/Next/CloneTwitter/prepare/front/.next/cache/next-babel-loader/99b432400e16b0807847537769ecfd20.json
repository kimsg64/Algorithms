{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// HYDRATE는 서버 사이드 렌더링을 위함이다.\n// 서버 사이드 렌더링을 하기 위해 index reducer를 추가하는 것\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\"; // async action creater\n// 이전 상태와 액션을 통해 다음 상태를 만드는 함수인 거시다.\n// 리듀서들을 나눌 때는 이렇게 combineReducers로 세 개의 reducer를 합쳐 준다.\n// initialState도 컴바인리듀서가 알아서 해 준다.\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AAEA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAClCI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKR,OAAL;AACES,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACF;AACE,eAAOL,KAAP;AALJ;AAOD,GATiC;AAUlCJ,EAAAA,IAVkC;AAWlCC,EAAAA;AAXkC,CAAD,CAAnC;AAcA,eAAeC,WAAf","sourcesContent":["// HYDRATE는 서버 사이드 렌더링을 위함이다.\r\n// 서버 사이드 렌더링을 하기 위해 index reducer를 추가하는 것\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\n\r\n// async action creater\r\n\r\n// 이전 상태와 액션을 통해 다음 상태를 만드는 함수인 거시다.\r\n// 리듀서들을 나눌 때는 이렇게 combineReducers로 세 개의 reducer를 합쳐 준다.\r\n// initialState도 컴바인리듀서가 알아서 해 준다.\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}