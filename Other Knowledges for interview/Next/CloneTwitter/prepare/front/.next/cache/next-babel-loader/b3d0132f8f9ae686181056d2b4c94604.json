{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // throttle은 takeEvery와 같이, 반복적인 요청을 막기 위해 사용한다.\n  // takeEvery는 반복적인 요청이 갔을 때 응답을 한 번만 하도록 하는 것인 반면,\n  // throttle은 정해진 시간 내에 딱 한 번만 해당 요청이 발생하도록 하는 것이다.\n  // 아래 코드는 게시글 작성을 2초 안에는 딱 한 번만 보낼 수 있다.\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","addPostAPI","data","post","addPost","action","type","ADD_POST_SUCCESS","result","err","ADD_POST_FAILURE","response","watchAddPost","ADD_POST_REQUEST","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,GADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,UALF,EAMEC,QANF,QAOO,oBAPP;;AASA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEC,gBADE;AAERL,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEI,gBADE;AAERR,MAAAA,IAAI,EAAEO,GAAG,CAACE,QAAJ,CAAaT;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,YAAV,GAAyB;AACvB;AACA;AACA;AACA;AACA,QAAMb,UAAU,CAACc,gBAAD,EAAmBT,OAAnB,CAAhB;AACD;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAClC,QAAMnB,GAAG,CAAC,CAACE,IAAI,CAACe,YAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // throttle은 takeEvery와 같이, 반복적인 요청을 막기 위해 사용한다.\r\n  // takeEvery는 반복적인 요청이 갔을 때 응답을 한 번만 하도록 하는 것인 반면,\r\n  // throttle은 정해진 시간 내에 딱 한 번만 해당 요청이 발생하도록 하는 것이다.\r\n  // 아래 코드는 게시글 작성을 2초 안에는 딱 한 번만 보낼 수 있다.\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}