{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // throttle은 takeEvery와 같이, 반복적인 요청을 막기 위해 사용한다.\n  // takeEvery는 반복적인 요청이 갔을 때 응답을 한 번만 하도록 하는 것인 반면,\n  // throttle은 정해진 시간 내에 딱 한 번만 해당 요청이 발생하도록 하는 것이다.\n  // 아래 코드는 게시글 작성을 2초 안에는 딱 한 번만 보낼 수 있다.\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: {\n        id\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/comment\", data);\n}\n\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","watchAddPost","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","addComment","watchAddComment","commentSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: {\r\n        id,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // throttle은 takeEvery와 같이, 반복적인 요청을 막기 위해 사용한다.\r\n  // takeEvery는 반복적인 요청이 갔을 때 응답을 한 번만 하도록 하는 것인 반면,\r\n  // throttle은 정해진 시간 내에 딱 한 번만 해당 요청이 발생하도록 하는 것이다.\r\n  // 아래 코드는 게시글 작성을 2초 안에는 딱 한 번만 보낼 수 있다.\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: {\r\n        id,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/comment\", data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  // const result = yield call(addCommentAPI, action.data);\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* commentSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}