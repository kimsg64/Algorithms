{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  isLoggedIn: false,\n  me: null,\n  signUpData: {},\n  loginData: {}\n}; // action creater: 원래 액션은 객체인데 객체로 만들면 동적으로 값을 바꾸기 힘들어서 객체를 뱉는 함수를 만든 것\n// thunk가 해 주는 일이 이것이다.(비동기 액션을 가능하게 해 줌, 한 번에 디스패치를 여러 번 할 수 있게 해 준다.)\n// saga를 쓰면 조금 더 많은 것을 해 준다. 딜레이(몇 초 뒤에 디스패치가 가능하게 한다든지...)\n// 그래서 간단한 어플을 만들 때는 thunk를 써서 비동기 액션만 사용 가능하게 해도 되는데, 그렇지 않으면 saga로 다양한 기능을 지원받으면 좋음\n\nexport var loginAction = function loginAction(data) {\n  return function (dispatch, getState) {\n    var state = getState();\n    dispatch(loginRequestAction());\n    axios.post(\"/api/login\").then(function (res) {\n      return dispatch(loginSuccessAction(res.data));\n    })[\"catch\"](function (err) {\n      return dispatch(loginFailureAction(err));\n    });\n  };\n};\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: \"LOG_IN_REQUEST\",\n    data: data\n  };\n};\nexport var loginSuccessAction = function loginSuccessAction(data) {\n  return {\n    type: \"LOG_IN_SUCCESS\",\n    data: data\n  };\n};\nexport var loginFailureAction = function loginFailureAction(data) {\n  return {\n    type: \"LOG_IN_FAILURE\",\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: \"LOG_OUT\"\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"LOG_IN\":\n      {\n        console.log(\"logged in\");\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: true,\n          me: action.data\n        });\n      }\n\n    case \"LOG_OUT\":\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/reducers/user.js"],"names":["initialState","isLoggedIn","me","signUpData","loginData","loginAction","data","dispatch","getState","state","loginRequestAction","axios","post","then","res","loginSuccessAction","err","loginFailureAction","type","logoutAction","reducer","action","console","log"],"mappings":";;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAE,KADc;AAE1BC,EAAAA,EAAE,EAAE,IAFsB;AAG1BC,EAAAA,UAAU,EAAE,EAHc;AAI1BC,EAAAA,SAAS,EAAE;AAJe,CAArB,C,CAOP;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACnC,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACAD,IAAAA,QAAQ,CAACG,kBAAkB,EAAnB,CAAR;AACAC,IAAAA,KAAK,CACFC,IADH,CACQ,YADR,EAEGC,IAFH,CAEQ,UAACC,GAAD;AAAA,aAASP,QAAQ,CAACQ,kBAAkB,CAACD,GAAG,CAACR,IAAL,CAAnB,CAAjB;AAAA,KAFR,WAGS,UAACU,GAAD;AAAA,aAAST,QAAQ,CAACU,kBAAkB,CAACD,GAAD,CAAnB,CAAjB;AAAA,KAHT;AAID,GAPD;AAQD,CATM;AAUP,OAAO,IAAMN,kBAAkB,GAAG,SAArBA,kBAAqB,CAACJ,IAAD,EAAU;AAC1C,SAAO;AAAEY,IAAAA,IAAI,EAAE,gBAAR;AAA0BZ,IAAAA,IAAI,EAAJA;AAA1B,GAAP;AACD,CAFM;AAGP,OAAO,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACT,IAAD,EAAU;AAC1C,SAAO;AAAEY,IAAAA,IAAI,EAAE,gBAAR;AAA0BZ,IAAAA,IAAI,EAAJA;AAA1B,GAAP;AACD,CAFM;AAGP,OAAO,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAACX,IAAD,EAAU;AAC1C,SAAO;AAAEY,IAAAA,IAAI,EAAE,gBAAR;AAA0BZ,IAAAA,IAAI,EAAJA;AAA1B,GAAP;AACD,CAFM;AAIP,OAAO,IAAMa,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAR,GAAP;AACD,CAFM;;AAIP,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCX,KAAiC,uEAAzBT,YAAyB;AAAA,MAAXqB,MAAW;;AAChD,UAAQA,MAAM,CAACH,IAAf;AACE,SAAK,QAAL;AAAe;AACbI,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,+CACKd,KADL;AAEER,UAAAA,UAAU,EAAE,IAFd;AAGEC,UAAAA,EAAE,EAAEmB,MAAM,CAACf;AAHb;AAKD;;AACD,SAAK,SAAL;AAAgB;AACd,+CACKG,KADL;AAEER,UAAAA,UAAU,EAAE,KAFd;AAGEC,UAAAA,EAAE,EAAE;AAHN;AAKD;;AACD;AAAS;AACP,iCAAYO,KAAZ;AACD;AAlBH;AAoBD,CArBD;;AAuBA,eAAeW,OAAf","sourcesContent":["export const initialState = {\r\n  isLoggedIn: false,\r\n  me: null,\r\n  signUpData: {},\r\n  loginData: {},\r\n};\r\n\r\n// action creater: 원래 액션은 객체인데 객체로 만들면 동적으로 값을 바꾸기 힘들어서 객체를 뱉는 함수를 만든 것\r\n// thunk가 해 주는 일이 이것이다.(비동기 액션을 가능하게 해 줌, 한 번에 디스패치를 여러 번 할 수 있게 해 준다.)\r\n// saga를 쓰면 조금 더 많은 것을 해 준다. 딜레이(몇 초 뒤에 디스패치가 가능하게 한다든지...)\r\n// 그래서 간단한 어플을 만들 때는 thunk를 써서 비동기 액션만 사용 가능하게 해도 되는데, 그렇지 않으면 saga로 다양한 기능을 지원받으면 좋음\r\nexport const loginAction = (data) => {\r\n  return (dispatch, getState) => {\r\n    const state = getState();\r\n    dispatch(loginRequestAction());\r\n    axios\r\n      .post(\"/api/login\")\r\n      .then((res) => dispatch(loginSuccessAction(res.data)))\r\n      .catch((err) => dispatch(loginFailureAction(err)));\r\n  };\r\n};\r\nexport const loginRequestAction = (data) => {\r\n  return { type: \"LOG_IN_REQUEST\", data };\r\n};\r\nexport const loginSuccessAction = (data) => {\r\n  return { type: \"LOG_IN_SUCCESS\", data };\r\n};\r\nexport const loginFailureAction = (data) => {\r\n  return { type: \"LOG_IN_FAILURE\", data };\r\n};\r\n\r\nexport const logoutAction = () => {\r\n  return { type: \"LOG_OUT\" };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"LOG_IN\": {\r\n      console.log(\"logged in\");\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        me: action.data,\r\n      };\r\n    }\r\n    case \"LOG_OUT\": {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        me: null,\r\n      };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}