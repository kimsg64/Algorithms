{"ast":null,"code":"var _jsxFileName = \"D:\\\\__My_crafts\\\\Algorithms For Coding Test\\\\Other Knowledges for interview\\\\Next\\\\CloneTwitter\\\\prepare\\\\front\\\\components\\\\AppLayout.js\";\nvar __jsx = React.createElement;\n// 페이지가 아닌 컴포넌트는 components 폴더에! (이건 필수는 아님)\n// 넥스트에는 router 기능과 hot-loader 기능까지 포함되어 있어서 Link는 그냥 next에서 가져오면 되고\n// 저장하면 알아서 개발 서버가 핫 리로딩된다\nimport React from \"react\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { Input, Menu, Row, Col } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport LoginForm from \"./LoginForm\";\nimport UserProfile from \"./UserProfile\";\nconst SearchInput = styled(Input.Search)`\n  vertical-align: middle;\n`;\nconst Global = createGlobalStyle`\n  .ant-row {\n    margin-right: 0 !important;\n    margin-left: 0 !important;\n  }\n\n  .ant-col:first-child {\n    padding-left: 0 !important;\n  }\n\n  .ant-col:last-child {\n    padding-right: 0 !important;\n  }\n`;\n\nconst AppLayout = ({\n  children\n}) => {\n  // 이건 더미 데이터임. 서버 만들면 없앨 예정\n  const {\n    me\n  } = useSelector(state => state.user);\n  console.log(\"me in app layout\", me); // const me = useSelector((state) => state.user.me);\n  // 위 두 개는 똑같음(성능이 살짝 다르지만 미미하다.)\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Global, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), __jsx(Menu, {\n    mode: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(Menu.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"\\uB178\\uB4DC\\uBC84\\uB4DC\"))), __jsx(Menu.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"\\uD504\\uB85C\\uD544\"))), __jsx(Menu.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(SearchInput, {\n    enterButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  })), __jsx(Menu.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    href: \"/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))), __jsx(Row, {\n    gutter: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: 24,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, me ? __jsx(UserProfile, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }) : __jsx(LoginForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 35\n    }\n  })), __jsx(Col, {\n    xs: 24,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, children), __jsx(Col, {\n    xs: 24,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    href: \"https://kimsg64.github.io/GyuTube/\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Made By Kim\"))));\n}; // 타입은 노드인데, 여기서 노드는 return 부에 들어갈 수 있는 모든 것을 의미한다.\n// 타입 스크립트 대용인 듯\n\n\nAppLayout.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default AppLayout;","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/components/AppLayout.js"],"names":["React","Link","PropTypes","Input","Menu","Row","Col","useSelector","styled","createGlobalStyle","LoginForm","UserProfile","SearchInput","Search","Global","AppLayout","children","me","state","user","console","log","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["// 페이지가 아닌 컴포넌트는 components 폴더에! (이건 필수는 아님)\r\n// 넥스트에는 router 기능과 hot-loader 기능까지 포함되어 있어서 Link는 그냥 next에서 가져오면 되고\r\n// 저장하면 알아서 개발 서버가 핫 리로딩된다\r\nimport React from \"react\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Menu, Row, Col } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport LoginForm from \"./LoginForm\";\r\nimport UserProfile from \"./UserProfile\";\r\n\r\nconst SearchInput = styled(Input.Search)`\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Global = createGlobalStyle`\r\n  .ant-row {\r\n    margin-right: 0 !important;\r\n    margin-left: 0 !important;\r\n  }\r\n\r\n  .ant-col:first-child {\r\n    padding-left: 0 !important;\r\n  }\r\n\r\n  .ant-col:last-child {\r\n    padding-right: 0 !important;\r\n  }\r\n`;\r\n\r\nconst AppLayout = ({ children }) => {\r\n  // 이건 더미 데이터임. 서버 만들면 없앨 예정\r\n  const { me } = useSelector((state) => state.user);\r\n  console.log(\"me in app layout\", me);\r\n  // const me = useSelector((state) => state.user.me);\r\n  // 위 두 개는 똑같음(성능이 살짝 다르지만 미미하다.)\r\n\r\n  return (\r\n    <div>\r\n      <Global />\r\n      <Menu mode=\"horizontal\">\r\n        <Menu.Item>\r\n          <Link href=\"/\">\r\n            <a>노드버드</a>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Link href=\"/profile\">\r\n            <a>프로필</a>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <SearchInput enterButton />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Link href=\"/signup\">\r\n            <a>회원가입</a>\r\n          </Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n      {/* 거터는 컬럼들 사이의 간격이다. Col 양쪽에 4px씩 패딩이 생긴다 */}\r\n      <Row gutter={8}>\r\n        {/*\r\n        xs는 모바일, sm은 태블릿, md는 작은 데스크탑이다.\r\n        아래의 의미는, Col 하나가 모바일 화면을 24/24만큼 사용하고, 작은 데스크탑에서는 6/24를 사용한다는 뜻 \r\n        아래 친구는, 모바일에서는 Col 하나가 화면 하나를 차지하여 세 페이지가 나올 것이고, 데스크탑에서는 25% 50% 25%로 나눠서 가져갈 것이다.\r\n        */}\r\n        <Col xs={24} md={6}>\r\n          {me ? <UserProfile /> : <LoginForm />}\r\n        </Col>\r\n        <Col xs={24} md={12}>\r\n          {children}\r\n        </Col>\r\n        <Col xs={24} md={6}>\r\n          {/* target _blank를 사용할 때는 rel=\"noreferrer noopener\"을 반드시 써야 보안 위협이 줄어든다. */}\r\n          {/* 새 창을 열었을 때 어떤 창에서 정보가 들어왔는지가 전달되는데, 이런 정보의 유출을 방지하기 위함(referrer가 이전 창, opener가 새 창) */}\r\n          <a\r\n            href=\"https://kimsg64.github.io/GyuTube/\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer noopener\"\r\n          >\r\n            Made By Kim\r\n          </a>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 타입은 노드인데, 여기서 노드는 return 부에 들어갈 수 있는 모든 것을 의미한다.\r\n// 타입 스크립트 대용인 듯\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default AppLayout;\r\n"]},"metadata":{},"sourceType":"module"}