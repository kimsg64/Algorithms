{"ast":null,"code":"// for next-redux-wrapper\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\"; // import thunkMiddelware from \"redux-thunk\";\n\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport reducer from \"../reducers\";\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  // 로그를 찍어주는 간단한 미들웨어를 만들어봤다.\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  // const middlewares = [thunkMiddelware];\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware]; // 미들웨어: 리덕스의 기능을 향상시켜주는 친구\n  // -> thunk는 리덕스가 비동기 처리를 할 수 있도록 해 줌 (호출할 때 디스패치 => 하나의 액션에서 여러번 디스패치가 가능해진다.)\n  // 즉, 하나의 비동기 요청 안에 여러 개의 동기 액션이 가능\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/store/configureStore.js"],"names":["applyMiddleware","compose","createStore","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,gBAAgB,GACpB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCC,IAAD,IACCC,MAAD,IAAY;AACV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAPH;;AASA,MAAMG,cAAc,GAAG,MAAM;AAC3B;AACA,QAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,QAAMW,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB,CAH2B,CAI3B;AACA;AACA;;AACA,QAAMU,QAAQ,GACZ,QACIhB,OAAO,CAACD,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADX,GAEIZ,mBAAmB,CAACJ,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGhB,WAAW,CAACI,OAAD,EAAUW,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CAbD;;AAeA,MAAMC,OAAO,GAAGhB,aAAa,CAACW,cAAD,EAAiB;AAC5CM,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["// for next-redux-wrapper\r\nimport { applyMiddleware, compose, createStore } from \"redux\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import thunkMiddelware from \"redux-thunk\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport reducer from \"../reducers\";\r\n\r\nconst loggerMiddleware =\r\n  ({ dispatch, getState }) =>\r\n  (next) =>\r\n  (action) => {\r\n    // 로그를 찍어주는 간단한 미들웨어를 만들어봤다.\r\n    console.log(action);\r\n    return next(action);\r\n  };\r\n\r\nconst configureStore = () => {\r\n  // const middlewares = [thunkMiddelware];\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n  // 미들웨어: 리덕스의 기능을 향상시켜주는 친구\r\n  // -> thunk는 리덕스가 비동기 처리를 할 수 있도록 해 줌 (호출할 때 디스패치 => 하나의 액션에서 여러번 디스패치가 가능해진다.)\r\n  // 즉, 하나의 비동기 요청 안에 여러 개의 동기 액션이 가능\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, enhancer);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}