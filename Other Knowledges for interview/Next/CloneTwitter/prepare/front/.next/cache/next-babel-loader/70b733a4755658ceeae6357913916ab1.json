{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\n\nfunction logInAPI(data) {\n  // 실제로 서버에 요청(제너레이터 아님)\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // call도 해당 함수를 실행시키는데, fork와 약간 다르다.\n    // fork는 비동기 함수 호출, call은 동기 함수 호출이다.\n    // 즉 여기서 yield call 대신 yield fork를 써버리면, loginAPI의 결과가 result에 담기기 전에 바로 다음 줄로 넘어가 버린다.\n    // call을 하면 앞의 logInAPI가 완료될 때까지 실행되지 않는다.\n    // 즉 call은 axios.post().then(res => res)처럼 작동하지만, fork를 여기서 쓰면 axios.post() 뒤에 res가 없는데 res를 찾는 꼴이 되어버린다.\n    // 또, call과 fork는 첫 번째 인자로 콜백함수, 두 번째 인자부터는 다른 데이터들이 넘어가는데, 이는 callback(a, b, c, ...) 이런 식으로 사용하는 것과 같다.\n    // 아래 예시로는 logInAPI(action.data)와 같은 것\n    // const result = yield call(logInAPI, action.data);\n    // 서버가 없는 상태이므로 임시로 delay를 사용할 예정이다. setTimeout과 비슷하다.\n    yield delay(1000); // put은 dispatch같은 것이다.\n\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // take는 해당 액션이 실행될 때까지 기다렸다가 두 번째 인자로 전달된 함수를 실행시킨다. (액션 데이터도 같이 넘어간다.)\n  // 이 take는 일회용이라서 그냥 이렇게 쓰면 로그인을 한 번밖에 못한다...\n  // 그래서 while문을 사용하거나, takeEvery로 바꿔서 사용해 주면 된다.\n  // 단, take는 동기적이지만 takeEvery는 비동기적으로 동작한다는 차이가 있다.\n  // takeLatest는 반복적인 요청에 대해 마지막 응답만을 취하는 것이다.\n  // 예를 들면, 실수로 두 번 클릭했을 때, 로그인 요청이 두 번 가는데, 이 때 마지막 요청에 대한 응답만을 받아오게 해 준다. (요청 자체를 취소할 수는 없음)\n  // 그래서 보통 takeLatest를 쓴다.\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/__My_crafts/Algorithms For Coding Test/Other Knowledges for interview/Next/CloneTwitter/prepare/front/sagas/user.js"],"names":["axios","all","delay","fork","put","takeLatest","logInAPI","data","post","logIn","action","type","err","response","watchLogIn","logOutAPI","logOut","watchLogOut","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AACA,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX,CAXE,CAaF;;AACA,UAAME,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAlBD,CAkBE,OAAOK,GAAP,EAAY;AACZ,UAAMR,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,UAAV,GAAuB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMT,UAAU,CAAC,gBAAD,EAAmBI,KAAnB,CAAhB;AACD;;AAED,SAASM,SAAT,GAAqB;AACnB,SAAOf,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,iBADE;AAERJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,GAAP,EAAY;AACZ,UAAMR,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,iBADE;AAERJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,WAAV,GAAwB;AACtB,QAAMZ,UAAU,CAAC,iBAAD,EAAoBW,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMjB,GAAG,CAAC,CAACE,IAAI,CAACW,UAAD,CAAL,EAAmBX,IAAI,CAACc,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nfunction logInAPI(data) {\r\n  // 실제로 서버에 요청(제너레이터 아님)\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // call도 해당 함수를 실행시키는데, fork와 약간 다르다.\r\n    // fork는 비동기 함수 호출, call은 동기 함수 호출이다.\r\n    // 즉 여기서 yield call 대신 yield fork를 써버리면, loginAPI의 결과가 result에 담기기 전에 바로 다음 줄로 넘어가 버린다.\r\n    // call을 하면 앞의 logInAPI가 완료될 때까지 실행되지 않는다.\r\n    // 즉 call은 axios.post().then(res => res)처럼 작동하지만, fork를 여기서 쓰면 axios.post() 뒤에 res가 없는데 res를 찾는 꼴이 되어버린다.\r\n    // 또, call과 fork는 첫 번째 인자로 콜백함수, 두 번째 인자부터는 다른 데이터들이 넘어가는데, 이는 callback(a, b, c, ...) 이런 식으로 사용하는 것과 같다.\r\n    // 아래 예시로는 logInAPI(action.data)와 같은 것\r\n    // const result = yield call(logInAPI, action.data);\r\n\r\n    // 서버가 없는 상태이므로 임시로 delay를 사용할 예정이다. setTimeout과 비슷하다.\r\n    yield delay(1000);\r\n\r\n    // put은 dispatch같은 것이다.\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  // take는 해당 액션이 실행될 때까지 기다렸다가 두 번째 인자로 전달된 함수를 실행시킨다. (액션 데이터도 같이 넘어간다.)\r\n  // 이 take는 일회용이라서 그냥 이렇게 쓰면 로그인을 한 번밖에 못한다...\r\n  // 그래서 while문을 사용하거나, takeEvery로 바꿔서 사용해 주면 된다.\r\n  // 단, take는 동기적이지만 takeEvery는 비동기적으로 동작한다는 차이가 있다.\r\n  // takeLatest는 반복적인 요청에 대해 마지막 응답만을 취하는 것이다.\r\n  // 예를 들면, 실수로 두 번 클릭했을 때, 로그인 요청이 두 번 가는데, 이 때 마지막 요청에 대한 응답만을 받아오게 해 준다. (요청 자체를 취소할 수는 없음)\r\n  // 그래서 보통 takeLatest를 쓴다.\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}